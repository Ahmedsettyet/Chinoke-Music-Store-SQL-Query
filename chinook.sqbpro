<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="R:/ET Misc/Udacity/Advanced Data Analysis/Project 1 sql/chinook-db/chinook_db/chinook.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="150"/><column_width id="3" width="6194"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainArtist"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Album" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="100"/><column index="2" value="300"/><column index="3" value="90"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Artist" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="90"/><column index="2" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Most Genre Tracks selling more than 100 tracks">SELECT Genre.name Track_Genre,count(InvoiceLine.InvoiceLineId) Tracks_Sold
FROM InvoiceLine
JOIN Track 
ON Track.trackid=InvoiceLine.TrackId
JOIN Genre
ON Genre.GenreId=Track.GenreId
GROUP BY 1
HAVING Tracks_Sold &gt;100
ORDER BY 2 DESC;</sql><sql name="the top 10 Rock musicians">SELECT Artist.Name Artist_Name, Genre.Name Genre_Name, count (Genre.Name) Rock_Count
FROM Artist
JOIN Album
ON Artist.ArtistId=Album.ArtistId
JOIN Track
ON Track.AlbumId=Album.AlbumId
JOIN Genre
ON Track.GenreId=Genre.GenreId
GROUP BY 1,2
HAVING Genre_Name= 'Rock'
ORDER BY 3 DESC
LIMIT 10;
</sql><sql name="The Top 10 Artists Income by Rock Tracks">SELECT Artist.Name Artist_Name, sum ( invoiceline.Quantity*InvoiceLine.UnitPrice)
FROM Artist
JOIN Album
ON Artist.ArtistId=Album.ArtistId
JOIN Track
ON Track.AlbumId=Album.AlbumId
JOIN Genre
ON Track.GenreId=Genre.GenreId
JOIN InvoiceLine
ON InvoiceLine.TrackId=Track.TrackId
GROUP BY 1
HAVING Genre.Name= 'Rock'
ORDER BY 2 DESC
LIMIT 10;</sql><sql name="Customers Spent more than the average among all customers&#13;&#10;">SELECT Customer.CustomerId customer_id, Customer.FirstName First_Name, Customer.LastName Last_Name, sum (Invoice.Total) Total_spent
FROM Customer
JOIN Invoice
ON Invoice.CustomerId=Customer.CustomerId
GROUP BY 1
HAVING Total_Spent &gt;= (
	SELECT avg (Customer_Spent)
	FROM (
		SELECT Customer.customerid, sum (Invoice.Total) Customer_Spent
		FROM Customer
		JOIN Invoice
		ON Invoice.customerid=Customer.CustomerId
		GROUP BY 1))
ORDER BY 4 DESC;</sql><current_tab id="3"/></tab_sql></sqlb_project>
