/*Query 1 Most Genre Tracks selling more than 100 tracks*/

SELECT Genre.name Track_Genre,count(InvoiceLine.InvoiceLineId) Tracks_Sold
FROM InvoiceLine
JOIN Track 
ON Track.trackid=InvoiceLine.TrackId
JOIN Genre
ON Genre.GenreId=Track.GenreId
GROUP BY 1
HAVING Tracks_Sold >100
ORDER BY 2 DESC;

************************
/*Query 2  the top 10 Rock musicians*/

SELECT Artist.Name Artist_Name, Genre.Name Genre_Name, count (Genre.Name) Rock_Count
FROM Artist
JOIN Album
ON Artist.ArtistId=Album.ArtistId
JOIN Track
ON Track.AlbumId=Album.AlbumId
JOIN Genre
ON Track.GenreId=Genre.GenreId
GROUP BY 1,2
HAVING Genre_Name= 'Rock'
ORDER BY 3 DESC
LIMIT 10;

***************
/*Query 3: The Top 10 Artists Income by Rock Tracks */

SELECT Artist.Name Artist_Name, sum ( invoiceline.Quantity*InvoiceLine.UnitPrice)
FROM Artist
JOIN Album
ON Artist.ArtistId=Album.ArtistId
JOIN Track
ON Track.AlbumId=Album.AlbumId
JOIN Genre
ON Track.GenreId=Genre.GenreId
JOIN InvoiceLine
ON InvoiceLine.TrackId=Track.TrackId
GROUP BY 1
HAVING Genre.Name= 'Rock'
ORDER BY 2 DESC
LIMIT 10;

*****************
/*Query 4:   Customers Spent more than the average among all customers*/

SELECT Customer.CustomerId customer_id, Customer.FirstName First_Name, Customer.LastName Last_Name, sum (Invoice.Total) Total_spent
FROM Customer
JOIN Invoice
ON Invoice.CustomerId=Customer.CustomerId
GROUP BY 1
HAVING Total_Spent >= (
	SELECT avg (Customer_Spent)
	FROM (
		SELECT Customer.customerid, sum (Invoice.Total) Customer_Spent
		FROM Customer
		JOIN Invoice
		ON Invoice.customerid=Customer.CustomerId
		GROUP BY 1))
ORDER BY 4 DESC;